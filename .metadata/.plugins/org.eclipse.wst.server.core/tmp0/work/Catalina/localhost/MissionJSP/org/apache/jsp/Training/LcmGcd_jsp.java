/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-06-18 01:51:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Training;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.security.interfaces.RSAKey;

public final class LcmGcd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


int gcd=0;
int lcm=0;
void gcdlcm(int num1,int num2){
	int min = (num1>num2)? num2 : num1;
	int max = (num1>num2)? num1 : num2;
	while(true){
		int rem = max%min;
		if(rem==0){
			gcd = min;
			lcm = (num1+ num2)/min;
			break;
		}
		max=min;
		min=rem;
	}
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.security.interfaces.RSAKey");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>유클리드 호제법</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<form>\r\n");
      out.write("		<table style=\"border: 1px solid black\">\r\n");
      out.write("			");

		        String snum1 = request.getParameter("num1");
		        String snum2 = request.getParameter("num2");
		        if(snum1 != null && !snum1.isEmpty() && snum2 != null && !snum2.isEmpty()){
		            int num1 = Integer.parseInt(snum1);
		            int num2 = Integer.parseInt(snum2);
		            gcdlcm(num1, num2);
        		}
        	
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td> 숫자1: </td>\r\n");
      out.write("\r\n");
      out.write("<!-- 				<td> <intput type='text' name='num1'placeholder='숫자를 입력하세요'/> </td> -->\r\n");
      out.write("\r\n");
      out.write("				<td><intput type='text' name='num1'value='");
      out.print( (snum1 != null ? snum1 : " ") );
      out.write("' placeholder='숫자를 입력하세요'/></td>\r\n");
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write(" 				<td> 숫자2: </td>\r\n");
      out.write("\r\n");
      out.write("<!-- 				<td> <intput type='text' name='num2'placeholder='숫자를 입력하세요'/> </td> -->\r\n");
      out.write("\r\n");
      out.write("				<td><intput type='text' name='num2'value='");
      out.print((snum2 != null ? snum2 : " "));
      out.write("' placeholder='숫자를 입력하세요'/></td>\r\n");
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td> 최대공약수 : </td>\r\n");
      out.write("				<td><intput type='text' name='num3'value='");
      out.print( gcd);
      out.write("' readonly/></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td> 최소공배수 : </td>\r\n");
      out.write("				<td><intput type='text' name='num3' value='");
      out.print( lcm);
      out.write("' readonly/></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr><td><input style='width:100%;'type='submit'value='실행'/></td></tr>\r\n");
      out.write("			\r\n");
      out.write("<!-- 			out.print(\"<tr>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td> 숫자1: </td>\"); -->\r\n");
      out.write("<!-- 				if(sum1==null){ -->\r\n");
      out.write("<!-- 				out.print(\"<td> <intput type='text' name='num1'placeholder='숫자를 입력하세요'/> </td>\"); -->\r\n");
      out.write("<!-- 				}else{ -->\r\n");
      out.write("<!-- 				out.print(\"<td><intput type='text' name='num1'value='\"snum1\"'/></td>\"); -->\r\n");
      out.write("<!-- 				} -->\r\n");
      out.write("<!-- 			out.print(\"</tr>\"); -->\r\n");
      out.write("<!-- 			out.print(\"<tr>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td> 숫자2: </td>\"); -->\r\n");
      out.write("<!-- 				if(sum2==null){ -->\r\n");
      out.write("<!-- 				out.print(\"<td> <intput type='text' name='num1'placeholder='숫자를 입력하세요'/> </td>\"); -->\r\n");
      out.write("<!-- 				}else{ -->\r\n");
      out.write("<!-- 				out.print(\"<td><intput type='text' name='num1'value='\"snum2\"'/></td>\"); -->\r\n");
      out.write("<!-- 				} -->\r\n");
      out.write("<!-- 			out.print(\"</tr>\"); -->\r\n");
      out.write("			\r\n");
      out.write("<!-- 			out.print(\"<tr>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td> 최대공약수 : </td>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td><intput type='text' name='num3'value='\"gcd\"' readonly/></td>\"); -->\r\n");
      out.write("<!-- 			out.print(\"</tr>\"); -->\r\n");
      out.write("<!-- 			out.print(\"<tr>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td> 최소공배수 : </td>\"); -->\r\n");
      out.write("<!-- 				out.print(\"<td><intput type='text' name='num3'value='\"lcm\"' readonly/></td>\"); -->\r\n");
      out.write("<!-- 			out.print(\"</tr>\"); -->\r\n");
      out.write("<!-- 			out.print(\"<tr><td><input style='width:100%;'type='submit'value='실행'/></td></tr>\"); -->\r\n");
      out.write("<!-- 			%> -->\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
